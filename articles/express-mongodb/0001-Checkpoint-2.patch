From 9940634acf4980035908449d49c81a9d12e73dbb Mon Sep 17 00:00:00 2001
From: ciaranj <ciaranj@gmail.com>
Date: Thu, 18 Feb 2010 21:05:55 +0000
Subject: [PATCH] Checkpoint 2

---
 .gitmodules                 |    3 ++
 app.js                      |   74 ++++++++++++++++++++++++++++++++++++++++++
 articleprovider-memory.js   |   51 +++++++++++++++++++++++++++++
 articleprovider-mongodb.js  |   75 +++++++++++++++++++++++++++++++++++++++++++
 lib/support/mongodb         |    1 +
 views/blog_new.haml.html    |   11 ++++++
 views/blog_show.haml.html   |   20 +++++++++++
 views/blogs_index.haml.html |    8 ++++
 views/layout.haml.html      |    6 +++
 views/style.sass.css        |   40 +++++++++++++++++++++++
 10 files changed, 289 insertions(+), 0 deletions(-)
 create mode 100644 app.js
 create mode 100644 articleprovider-memory.js
 create mode 100644 articleprovider-mongodb.js
 create mode 160000 lib/support/mongodb
 create mode 100644 views/blog_new.haml.html
 create mode 100644 views/blog_show.haml.html
 create mode 100644 views/blogs_index.haml.html
 create mode 100644 views/layout.haml.html
 create mode 100644 views/style.sass.css

diff --git a/.gitmodules b/.gitmodules
index 6a9e75f..2485286 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -10,3 +10,6 @@
 [submodule "lib/support/sass"]
 	path = lib/support/sass
 	url = git://github.com/visionmedia/sass.js.git
+[submodule "lib/support/mongodb"]
+	path = lib/support/mongodb
+	url = git://github.com/christkv/node-mongodb-native.git
diff --git a/app.js b/app.js
new file mode 100644
index 0000000..1e21dc1
--- /dev/null
+++ b/app.js
@@ -0,0 +1,74 @@
+require.paths.unshift('lib')
+require('express')
+require('express/plugins')
+var ArticleProvider= require('./articleprovider-mongodb').ArticleProvider;
+
+configure(function(){
+  use(MethodOverride)
+  use(ContentLength)
+  use(CommonLogger)
+  set('root', __dirname)
+})                                             
+
+function getArticleProvider() {
+    return new ArticleProvider('localhost', 27017);
+}
+            
+get('/', function(){
+    var self= this;
+     getArticleProvider().findAll().addCallback(function(docs) {      
+        self.render('blogs_index.haml.html', {
+          locals: {
+            title: 'Blog',
+            articles: docs
+          }
+        })    
+    });
+})
+
+post('/blog/addComment', function() {
+    var self= this;
+    getArticleProvider().addCommentToArticle(this.param('_id'), {
+        person: self.param('person'),
+        comment: self.param('comment'),
+        created_at: new Date()
+    }).addCallback(function(docs) {         
+        self.redirect('/blog/' + self.param('_id'))
+    });    
+})
+
+get('/blog/new', function(){          
+    this.render('blog_new.haml.html', {
+      locals: {
+        title: 'New Post'
+      }
+    })    
+}) 
+
+post('/blog/new', function(){ 
+    var self= this;
+    getArticleProvider().save({
+        title: this.param('title'), 
+        body: this.param('body')
+    }).addCallback(function(docs) {         
+        self.redirect('/')
+    });    
+})
+
+get('/blog/*', function(id){
+    var self= this;
+     getArticleProvider().findById(id).addCallback(function(article) {
+               self.render('blog_show.haml.html', {
+                 locals: {
+                   title: article.title,
+                   article:article
+                 }
+            })
+    });    
+})
+
+get('/*.css', function(file){
+  this.render(file + '.sass.css', { layout: false })
+})
+
+run()
\ No newline at end of file
diff --git a/articleprovider-memory.js b/articleprovider-memory.js
new file mode 100644
index 0000000..b7252c3
--- /dev/null
+++ b/articleprovider-memory.js
@@ -0,0 +1,51 @@
+ArticleProvider = function() {}        
+
+var articleCounter= 1;
+
+ArticleProvider.prototype.dummyData= []; 
+
+ArticleProvider.prototype.findAll = function() {
+    var promise= new process.Promise();
+    promise.emitSuccess( this.dummyData );
+    return promise;
+};
+
+ArticleProvider.prototype.findById = function(id) {
+    var promise= new process.Promise(),
+        result= null;
+    for(var i=0;i<this.dummyData.length;i++) {
+        if( this.dummyData[i]._id == id ) {
+            result= this.dummyData[i];
+            break;
+        }
+    }
+    promise.emitSuccess( result );
+    return promise;
+};    
+
+ArticleProvider.prototype.save = function(articles) {
+    var promise= new process.Promise(),
+        article= null;   
+
+    if( typeof(articles.length)=="undefined") articles= [articles];
+    
+    for( var i=0;i< articles.length;i++ ) {
+        article= articles[i];
+        article._id= articleCounter++;
+        article.created_at= new Date(); 
+        if( article.comments === undefined ) article.comments= [];
+        for(var j=0;j< article.comments.length; j++) {
+            article.comments[j].created_at= new Date();
+        }
+        this.dummyData[this.dummyData.length]= article;
+    }                                      
+    promise.emitSuccess();
+    return promise;
+};  
+
+/* Lets bootstrap with dummy data */
+new ArticleProvider().save([{title: 'Post one', body: 'Body one', comments:[{author:'Bob', comment:'I love it'}, {author:'Dave', comment:'This is rubbish!'}]},
+                          {title: 'Post two', body: 'Body two'},
+                          {title: 'Post three', body: 'Body three'}]);
+
+exports.ArticleProvider= ArticleProvider;
\ No newline at end of file
diff --git a/articleprovider-mongodb.js b/articleprovider-mongodb.js
new file mode 100644
index 0000000..75b14ce
--- /dev/null
+++ b/articleprovider-mongodb.js
@@ -0,0 +1,75 @@
+require.paths.unshift("./lib/support/mongodb/lib");   
+var mongo = require("mongodb/db");
+process.mixin(mongo, require('mongodb/connection'));
+var ObjectID= require('mongodb/bson/bson').ObjectID;
+
+ArticleProvider = function(host, port) {
+    this.connected = false;
+    this.db = new mongo.Db('node-mongo-blog', new mongo.Server(host, port, {auto_reconnect: true}, {})); 
+}
+
+ArticleProvider.prototype.addCommentToArticle= function(articleId, comment) {
+    var promise= new process.Promise();
+    this.db.open(function(db) {
+        db.collection(function(article_collection) {
+            article_collection.update( function(article){
+                                           promise.emitSuccess();
+                                        },
+                                       {_id: ObjectID.createFromHexString(articleId)}, 
+                                       {"$push": {comments: comment}});
+        }, 'articles');
+    });
+    return promise;
+};
+
+ArticleProvider.prototype.findAll = function() {
+    var promise= new process.Promise();
+    this.db.open(function(db) {
+        db.collection(function(article_collection) { 
+            article_collection.find(function(cursor) { 
+                cursor.toArray(function(results) {
+                    promise.emitSuccess( results ); 
+                });
+            });
+        }, 'articles');
+    });
+    return promise;
+};
+
+ArticleProvider.prototype.findById = function(id) {
+    var promise= new process.Promise();
+        this.db.open(function(db) {
+            db.collection(function(article_collection) { 
+                article_collection.findOne(function(result) {
+                    promise.emitSuccess(result);
+                }, {_id: ObjectID.createFromHexString(id)});
+            }, 'articles');
+        });
+    return promise;
+};    
+
+ArticleProvider.prototype.save = function(articles) {
+    var promise= new process.Promise()
+    this.db.open(function(db) {
+        db.collection(function(article_collection) {
+            if( typeof(articles.length)=="undefined") articles= [articles];
+
+            for( var i=0;i< articles.length;i++ ) {
+                article= articles[i];
+                article.created_at= new Date(); 
+                if( article.comments === undefined ) article.comments= [];
+                for(var j=0;j< article.comments.length; j++) {
+                    article.comments[j].created_at= new Date();
+                }
+            }                                      
+             
+            article_collection.insert(articles, function() {
+                promise.emitSuccess();
+            });
+        }, 'articles');
+    });
+                                
+    return promise;
+};  
+
+exports.ArticleProvider= ArticleProvider;
\ No newline at end of file
diff --git a/lib/support/mongodb b/lib/support/mongodb
new file mode 160000
index 0000000..a0392fb
--- /dev/null
+++ b/lib/support/mongodb
@@ -0,0 +1 @@
+Subproject commit a0392fb6095aefdb8889dc8a269a36ee957e27a4
diff --git a/views/blog_new.haml.html b/views/blog_new.haml.html
new file mode 100644
index 0000000..951c172
--- /dev/null
+++ b/views/blog_new.haml.html
@@ -0,0 +1,11 @@
+%h1= title
+%form{ method: 'post' }
+  %div
+    %div
+      %span Title  :
+      %input{ type: 'text', name: 'title', id: 'editArticleTitle' }
+    %div
+      %span Body :
+      %textarea{name: 'body', rows: 20, id: 'editArticleBody' }
+    %div#editArticleSubmit
+      %input{ type: 'submit', value: 'Send' }
\ No newline at end of file
diff --git a/views/blog_show.haml.html b/views/blog_show.haml.html
new file mode 100644
index 0000000..3a08497
--- /dev/null
+++ b/views/blog_show.haml.html
@@ -0,0 +1,20 @@
+%h1= title
+%div#article             
+  %div.created_at= article.created_at
+  %div.title= article.title
+  %div.body= article.body
+  :each comment in article.comments
+    %div.comment
+      %div.person= comment.person
+      %div.comment= comment.comment
+  %div
+    %form{ method: 'post', action:"/blog/addComment" }
+      %input{type: "hidden", name:"_id", value: article._id.toHexString()}
+      %div
+        %span Author  :
+        %input{ type: 'text', name: 'person', id: 'addCommentPerson' }
+      %div
+        %span Comment :
+        %textarea{name: 'comment', rows: 5, id: 'addCommentComment' }
+      %div#editArticleSubmit
+        %input{ type: 'submit', value: 'Send' }
\ No newline at end of file
diff --git a/views/blogs_index.haml.html b/views/blogs_index.haml.html
new file mode 100644
index 0000000..c9dfc83
--- /dev/null
+++ b/views/blogs_index.haml.html
@@ -0,0 +1,8 @@
+%h1= title
+#articles
+  :each article in articles
+    %div.article             
+      %div.created_at= article.created_at
+      %div.title
+        %a{href:"/blog/"+article._id.toHexString()}= article.title
+      %div.body= article.body
\ No newline at end of file
diff --git a/views/layout.haml.html b/views/layout.haml.html
new file mode 100644
index 0000000..c806c03
--- /dev/null
+++ b/views/layout.haml.html
@@ -0,0 +1,6 @@
+%html
+  %head
+    %title= title
+    %link{ rel: 'stylesheet', href: '/style.css' }
+  %body
+    #wrapper= body
\ No newline at end of file
diff --git a/views/style.sass.css b/views/style.sass.css
new file mode 100644
index 0000000..a5f4295
--- /dev/null
+++ b/views/style.sass.css
@@ -0,0 +1,40 @@
+body
+  :font-family "Helvetica Neue", "Lucida Grande", "Arial"
+  :font-size 13px
+  :text-align center
+  =text-stroke 1px rgba(255, 255, 255, 0.1)
+  :color #555  
+h1, h2
+  :margin 0
+  :font-size 22px
+  :color #343434
+h1
+  :text-shadow 1px 2px 2px #ddd
+  :font-size 60px
+#articles
+  :text-align left
+  :margin-left auto
+  :margin-right auto
+  :width 320px
+  .article
+    :margin 20px
+    .created_at
+      :display none
+    .title
+      :font-weight bold
+      :text-decoration underline
+      :background-color #eee
+    .body
+      :background-color #ffa
+#article
+  .created_at
+    :display none
+  input[type=text]
+    :width 490px
+    :margin-left 16px
+  input[type=button]
+    :text-align left
+    :margin-left 440px
+  textarea
+    :width 490px
+    :height 90px
-- 
1.6.4.2

